// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "04/04/2022 10:30:23"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module assignment2A (
	clock,
	reset,
	w,
	z);
input 	clock;
input 	reset;
input 	w;
output 	z;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("assignment2A_v.sdo");
// synopsys translate_on

wire \w~dataout ;
wire \reset~dataout ;
wire \clock~dataout ;
wire \o.B~regout ;
wire \o.C~regout ;
wire \o.D~regout ;
wire \o.E~regout ;


// atom is at PIN_124
flex10ke_io \w~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\w~dataout ),
	.padio(w));
// synopsys translate_off
defparam \w~I .feedback_mode = "from_pin";
defparam \w~I .operation_mode = "input";
defparam \w~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \reset~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\reset~dataout ),
	.padio(reset));
// synopsys translate_off
defparam \reset~I .feedback_mode = "from_pin";
defparam \reset~I .operation_mode = "input";
defparam \reset~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_55
flex10ke_io \clock~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(\clock~dataout ),
	.padio(clock));
// synopsys translate_off
defparam \clock~I .feedback_mode = "from_pin";
defparam \clock~I .operation_mode = "input";
defparam \clock~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at LC3_C19
flex10ke_lcell \o.B (
// Equation(s):
// \o.B~regout  = DFFEA(\w~dataout  & !\o.D~regout  & !\o.C~regout , GLOBAL(\clock~dataout ), GLOBAL(\reset~dataout ), , , , )

	.dataa(vcc),
	.datab(\w~dataout ),
	.datac(\o.D~regout ),
	.datad(\o.C~regout ),
	.aclr(!\reset~dataout ),
	.aload(gnd),
	.clk(\clock~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\o.B~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \o.B .clock_enable_mode = "false";
defparam \o.B .lut_mask = "000c";
defparam \o.B .operation_mode = "normal";
defparam \o.B .output_mode = "reg_only";
defparam \o.B .packed_mode = "false";
// synopsys translate_on

// atom is at LC2_C19
flex10ke_lcell \o.C (
// Equation(s):
// \o.C~regout  = DFFEA(\o.B~regout  & !\w~dataout , GLOBAL(\clock~dataout ), GLOBAL(\reset~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(\o.B~regout ),
	.datad(\w~dataout ),
	.aclr(!\reset~dataout ),
	.aload(gnd),
	.clk(\clock~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\o.C~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \o.C .clock_enable_mode = "false";
defparam \o.C .lut_mask = "00f0";
defparam \o.C .operation_mode = "normal";
defparam \o.C .output_mode = "reg_only";
defparam \o.C .packed_mode = "false";
// synopsys translate_on

// atom is at LC1_C19
flex10ke_lcell \o.D (
// Equation(s):
// \o.D~regout  = DFFEA(\w~dataout  & \o.C~regout , GLOBAL(\clock~dataout ), GLOBAL(\reset~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(\w~dataout ),
	.datad(\o.C~regout ),
	.aclr(!\reset~dataout ),
	.aload(gnd),
	.clk(\clock~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\o.D~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \o.D .clock_enable_mode = "false";
defparam \o.D .lut_mask = "f000";
defparam \o.D .operation_mode = "normal";
defparam \o.D .output_mode = "reg_only";
defparam \o.D .packed_mode = "false";
// synopsys translate_on

// atom is at LC5_C19
flex10ke_lcell \o.E (
// Equation(s):
// \o.E~regout  = DFFEA(\o.D~regout  & \w~dataout , GLOBAL(\clock~dataout ), GLOBAL(\reset~dataout ), , , , )

	.dataa(vcc),
	.datab(vcc),
	.datac(\o.D~regout ),
	.datad(\w~dataout ),
	.aclr(!\reset~dataout ),
	.aload(gnd),
	.clk(\clock~dataout ),
	.cin(gnd),
	.cascin(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.combout(),
	.regout(\o.E~regout ),
	.cout(),
	.cascout());
// synopsys translate_off
defparam \o.E .clock_enable_mode = "false";
defparam \o.E .lut_mask = "f000";
defparam \o.E .operation_mode = "normal";
defparam \o.E .output_mode = "reg_only";
defparam \o.E .packed_mode = "false";
// synopsys translate_on

// atom is at PIN_51
flex10ke_io \z~I (
	.datain(\o.E~regout ),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(z));
// synopsys translate_off
defparam \z~I .feedback_mode = "none";
defparam \z~I .operation_mode = "output";
defparam \z~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
