// Copyright (C) 1991-2008 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II"
// VERSION "Version 8.1 Build 163 10/28/2008 SJ Web Edition"

// DATE "04/04/2022 10:54:04"

// 
// Device: Altera EPF10K30ETC144-1 Package TQFP144
// 

// 
// This Verilog file should be used for Custom Verilog HDL only
// 

`timescale 1 ps/ 1 ps

module assignment2B (
	clk,
	rstn,
	w,
	Q,
	c);
input 	clk;
input 	rstn;
input 	[1:0] w;
output 	Q;
output 	[1:0] c;

wire gnd = 1'b0;
wire vcc = 1'b1;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("assignment2B_v.sdo");
// synopsys translate_on



// atom is at PIN_56
flex10ke_io \clk~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(clk));
// synopsys translate_off
defparam \clk~I .feedback_mode = "from_pin";
defparam \clk~I .operation_mode = "input";
defparam \clk~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_54
flex10ke_io \rstn~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(rstn));
// synopsys translate_off
defparam \rstn~I .feedback_mode = "from_pin";
defparam \rstn~I .operation_mode = "input";
defparam \rstn~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_124
flex10ke_io \w[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(w[0]));
// synopsys translate_off
defparam \w[0]~I .feedback_mode = "from_pin";
defparam \w[0]~I .operation_mode = "input";
defparam \w[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_126
flex10ke_io \w[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(gnd),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(w[1]));
// synopsys translate_off
defparam \w[1]~I .feedback_mode = "from_pin";
defparam \w[1]~I .operation_mode = "input";
defparam \w[1]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_48
flex10ke_io \Q~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(Q));
// synopsys translate_off
defparam \Q~I .feedback_mode = "none";
defparam \Q~I .operation_mode = "output";
defparam \Q~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_110
flex10ke_io \c[0]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(c[0]));
// synopsys translate_off
defparam \c[0]~I .feedback_mode = "none";
defparam \c[0]~I .operation_mode = "output";
defparam \c[0]~I .reg_source_mode = "none";
// synopsys translate_on

// atom is at PIN_73
flex10ke_io \c[1]~I (
	.datain(gnd),
	.clk(gnd),
	.ena(vcc),
	.aclr(gnd),
	.oe(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.devoe(devoe),
	.dataout(),
	.padio(c[1]));
// synopsys translate_off
defparam \c[1]~I .feedback_mode = "none";
defparam \c[1]~I .operation_mode = "output";
defparam \c[1]~I .reg_source_mode = "none";
// synopsys translate_on

endmodule
